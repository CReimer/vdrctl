#!/usr/bin/perl

use strict;
use warnings;
use File::Basename;
use File::Spec::Functions qw(abs2rel);
use File::Temp qw(tempfile);
use Getopt::Long qw(:config pass_through);
use Pod::PlainText;
use Term::ANSIColor;

my $PROGNAME = 'vdrctl';
my $VERSION  = '0.0.3';

my $argsdir = `pkg-config --variable argsdir vdr`;
chomp($argsdir);
$argsdir = '/etc/vdr/conf.d' unless $argsdir;

my $availdir = "$argsdir/../conf.avail";

my $editor = $ENV{EDITOR};
$editor = 'vi' unless $editor;

my $force;
GetOptions(
  "argsdir=s"  => \$argsdir,
  "availdir=s" => \$availdir,
  "force"      => \$force,
  "help"       => \&help,
  "version"    => \&version
) or die("Error in command line arguments\n");

my %available;
foreach my $file (<"$availdir/*.conf">) {

  # Try 50-name.conf
  my ($priority, $name) = basename($file) =~ /^([0-9]*?)-(.*?).conf$/;

  # Try name.conf
  ($name) = basename($file) =~ /^(.*?).conf$/ unless $name;
  $available{$name} = $file;
}

my %enabled;
foreach my $file (<"$argsdir/*.conf">) {

  # Try 50-name.conf
  my ($priority, $name) = basename($file) =~ /^([0-9]*?)-(.*?).conf$/;

  # Try name.conf
  ($name) = basename($file) =~ /^(.*?).conf$/ unless $name;
  $enabled{$name} = $file;
}

my %merged = (%available, %enabled);

if ($ARGV[1]) {
  if    ($ARGV[0] eq 'disable') { disable($ARGV[1]); }
  elsif ($ARGV[0] eq 'edit')    { edit($ARGV[1]); }
  elsif ($ARGV[0] eq 'enable')  { enable($ARGV[1]); }
  elsif ($ARGV[0] eq 'list') {
    if    ($ARGV[1] eq '--enabled')  { list_enabled(); }
    elsif ($ARGV[1] eq '--disabled') { list_disabled(); }
    else                             { die("Unknown parameter $ARGV[1]") }
  }
  else                          { die("Unknown command $ARGV[0]") }
}
elsif ($ARGV[0]) {
  if    ($ARGV[0] eq 'list')   { list(); }
  elsif ($ARGV[0] eq 'status') { status(); }
  else                         { die("Unknown command $ARGV[0]") }
}
else { status(); }

sub status {
  print sprintf('%-22s%s', 'PLUGIN', 'STATE'), "\n";

  foreach my $plugin (sort(keys(%merged))) {
    print sprintf('%-22s', $plugin);

    if (!$enabled{$plugin}) {

      # Not in $argsdir --> disabled
      print colored['bright_red bold'], 'disabled';
    }
    elsif (!$available{$plugin}) {

      # Not in $availdir --> static
      print 'static';
    }
    else {
      # In both directories --> enabled
      print colored['bright_green bold'], 'enabled';
    }

    print "\n";
  }
}

sub list {
  foreach my $file (sort(keys %available)) {
    print "$file\n";
  }
}

sub list_enabled {
  foreach my $file (sort(keys %enabled)) {
    print "$file\n" if $enabled{$file} && $available{$file};
  }
}

sub list_disabled {
  foreach my $file (sort(keys %available)) {
    print "$file\n" unless $enabled{$file};
  }
}

sub enable {
  my $plugin = $_[0];
  my $filename = basename($available{$plugin}) or die("$plugin is unknown\n");

  # $file may be not the exact filename.
  symlink(abs2rel("$availdir/$filename"), "$argsdir/$filename")
    or die "Cannot create symlink to $argsdir/$filename\n";
}

sub disable {
  my $plugin = $_[0];
  my $filename = basename($enabled{$plugin}) or die("$plugin is unknown\n");

  # Unlink only if it is a symlink or --force is set.
  if (-l "$argsdir/$filename" or $force) {
    unlink("$argsdir/$filename") or die("Cannot delete $filename\n");
  }
  else {
    die("$filename is not a symlink. Use --force to disable it anyways\n");
  }
}

sub edit {
  my $plugin   = $_[0];
  my $filename = basename($merged{$plugin}) or die("$plugin is unknown\n");
  my $filepath = $merged{$plugin};

  # Open new tempfile writable, enable autodelete before program exit
  my ($tmp_write, $tmpfile) = tempfile("/tmp/$plugin-XXXX", UNLINK => 1);

  # Open config file (readable)
  open(my $conf_read, '<', $filepath) or die "Couldn't open $filepath, $!\n";
  while (<$conf_read>) {
    unless ($_ =~ /^\n$/) {
      print $tmp_write $_;
    }
  }
  close($conf_read);        # Close config file
  print $tmp_write "\n";    # One newline to separate config from info

  # Open STDOUT of vdr
  open(my $vdr, '-|', 'vdr', '-P', $plugin, '-h');
  my $reachedPlugin;
  while (<$vdr>) {
    $reachedPlugin = 1 if $_ =~ /^$plugin/;
    print $tmp_write "#$PROGNAME $_" if $reachedPlugin or $plugin eq 'vdr';
  }
  close($vdr);              # Close STDOUT of vdr

  system($editor, $tmpfile);    # Open tempfile in $editor

  # Open tempfile (readable)
  open(my $tmp_read, '<', $tmpfile);

  # Open config file (writable)
  open(my $conf_write, '>', $filepath) or die "Couldn't open $filepath, $!\n";
  while (<$tmp_read>) {
    unless ($_ =~ /^#$PROGNAME/ or $_ =~ /^\n$/)
    {                           # Skip our own lines and empty lines
      print $conf_write $_;
    }
  }
  close($conf_read);            # Close config file
}

sub help {
  Pod::PlainText->new(sentence => 0)->parse_from_file($0);
  exit;
}

sub version {
  print "$PROGNAME $VERSION\n";
  exit;
}

__END__

=head1 NAME

vdrctl - Control vdr config-files

=head1 DESCRIPTION

B<vdrctl> adds/removes symlinks or list the available or active config-files of vdr.

In the following ARGSDIR is the configured conf.d path or read by pkg-config

ARGSDIR is /etc/vdr/conf.d

AVAILDIR is /etc/vdr/conf.d/../conf.avail

=head2 Global options

=over 5

=item B<--argsdir>=<directory>

read config-files from <directory> instead of ARGSDIR

=item B<--availdir>=<directory>

read config-files from <directory> instead of AVAILDIR

=item B<--help>

Display this help and exit

=item B<--version>

Output version information and exit

=head2 Commands

=item B<list>

Show all available config-files

=over 5

=item B<--enabled>

Show all enabled config-files

=item B<--disabled>

Show all disabled config-files

=back

=item B<enable> <filename>

Enable the config-file by creating a symlink to the ARGSDIR

=item B<disable> <filename>

Disable the config-file by removing the symlink from ARGSDIR

=item B<status>

Show all available config-files and their current status (enabled, disabled, static)

=item B<edit> <filename>

Start an editor to allow modifications to the selected config-file

=back
