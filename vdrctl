#!/usr/bin/perl

use strict;
use warnings;
use File::Basename;
use File::Path;
use File::Spec::Functions qw(abs2rel);
use Getopt::Long qw(:config pass_through);
use Pod::PlainText;
use Switch 'Perl6';
use Term::ANSIColor;

my $PROGNAME = 'vdrctl';
my $VERSION  = '0.0.1';

my $argsdir = `pkg-config --variable argsdir vdr`;
chomp($argsdir);
$argsdir = '/etc/vdr/conf.d' unless $argsdir;

my $availdir = "$argsdir/../conf.avail";

my $editor = $ENV{EDITOR};
$editor = 'nano' unless $editor;

my $force;
GetOptions(
  "argsdir=s"  => \$argsdir,
  "availdir=s" => \$availdir,
  "force"      => \$force,
  "help"       => \&help,
  "version"    => \&version
) or die("Error in command line arguments\n");

chdir($availdir);
my %available;
foreach my $file (glob('*.conf')) {
  $available{$file} = "$availdir/$file";
}

# Switch back to $argsdir and stay there
chdir($argsdir);
my %enabled;
foreach my $file (glob('*.conf')) {
  $enabled{$file} = "$argsdir/$file";
}

given ($ARGV[0]) {
  when 'disable' { disable($ARGV[1]); }
  when 'edit'    { edit($ARGV[1]); }
  when 'enable'  { enable($ARGV[1]); }
  when 'list' {
    given ($ARGV[1]) {
      when '--enabled'  { list_enabled(); }
      when '--disabled' { list_disabled(); }
      default           { list(); }
    }
  }
  default { list(); }
}

sub list {
  print sprintf('%-44s%s', 'ARGUMENT FILE', 'STATE'), "\n";

  my %merged = (%available, %enabled);

  foreach my $file (sort(keys(%merged))) {

    # Filter out dead symlinks
    next unless (-s $merged{$file});

    print sprintf('%-44s', $file);

    if (!$enabled{$file}) {

      # Not in $argsdir --> disabled
      print colored['bright_red bold'], 'disabled';
    }
    elsif (!$available{$file}) {

      # Not in $availdir --> static
      print 'static';
    }
    else {
      # In both directories --> enabled
      print colored['bright_green bold'], 'enabled';
    }

    print "\n";
  }
}

sub list_enabled {
  foreach my $file (sort(keys %enabled)) {
    print "$file\n" if $enabled{$file} && $available{$file};
  }
}

sub list_disabled {
  foreach my $file (sort(keys %available)) {
    print "$file\n" unless $enabled{$file};
  }
}

sub enable {
  my $file = $_[0];

  # $file may be not the exact filename.
  unless ($available{$file}) {
    my $glob = glob("$availdir/[0-9]*-$file.conf");
    $file = basename($glob) if $glob;
  }

  symlink(abs2rel("$availdir/$file"), $file)
    or die "Cannot create symlink to $argsdir/$file\n";
}

sub disable {
  my $file = $_[0];

  # $file may be not the exact filename.
  unless ($enabled{$file}) {
    my $glob = glob("[0-9][0-9]*-$file.conf");
    $file = $glob if $glob;
  }

  # Unlink only if it is a symlink or --force is set.
  if (-l $file or $force) {
    unlink($file) or die("Cannot delete $file\n");
  }
  else {
    die("$file is not a symlink. Use --force to disable it anyways\n");
  }
}

sub edit {
  my $file = $_[0];
  system($editor, "$availdir/$file");
}

sub help {
  Pod::PlainText->new(sentence => 0)->parse_from_file($0);
  exit;
}

sub version {
  print "$PROGNAME $VERSION\n";
  exit;
}

__END__

=head1 NAME

vdrctl - Control vdr argument files

=head1 DESCRIPTION

B<vdrctl> adds/removes symlinks or list the available or active plugins of vdr.

In the following ARGSDIR is the configured conf.d path or read by pkg-config

AVAILDIR is /etc/vdr/conf.avail

ARGSDIR is /etc/vdr/conf.d

=head2 Global options

=over 5

=item B<--argsdir>=DIR

read files from <directory> instead of ARGSDIR

=item B<--availdir>=DIR

read files from <directory> instead of AVAILDIR

=item B<--help>

Display this help and exit

=item B<--version>

Output version information and exit

=head2 Commands

=item B<list>


read files from <directory> instead of AVAILDIR

=over 5

=item B<--enabled>

print a sorted list of all configuration files from ARGSDIR

=item B<--disabled>

print a sorted list of all configuration files from AVAILDIR which are not symlinked to ARGSDIR

=back

=item B<enable> <filename>

create a symlink in ARGSDIR pointing to the file in AVAILDIR

=item B<disable> <filename>

remove the symlink in ARGSDIR

=item B<edit> <filename>

start an editor so the user can add/remove options to the file in AVAILDIR

=back
