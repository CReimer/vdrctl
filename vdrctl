#!/usr/bin/perl

use v6;
use strict;
use Term::ANSIColor;

multi MAIN(Bool :$help, Bool:$version) {
  help() if $help;
  version() if $version;
}
multi MAIN('enable', $conf) {
  enable($conf)
}
multi MAIN('edit', $conf) {
  edit($conf)
}
my Bool $force;
multi MAIN('disable', $conf, Bool :$force) {
  disable($conf)
}
multi MAIN('list', Bool:$disabled, Bool:$enabled) {
  if ($disabled) {
    list_disabled();
  }
  elsif ($enabled) {
    list_enabled();
  }
  else {
    list();
  }
}

my $PROGNAME = 'vdrctl';
my $VERSION = '0.0.1';

my $argsdir  = QX('pkg-config --variable argsdir vdr');
chomp($argsdir);
$argsdir= '/etc/vdr/conf.d' unless $argsdir;

my $availdir = "$argsdir/../conf.avail";

my $editor   = %*ENV{'EDITOR'};
$editor = 'nano' unless $editor;

my %available;
my $dh = opendir($availdir);
$dh.say();
exit;
for "$availdir/*.conf".glob -> $file {
  %available{IO::Path.new($file).basename} = $file;
}
my %enabled;
for <"$argsdir/*.conf"> -> $file {
  %enabled{IO::Path.new($file).basename} = $file;
}

%available.say();
exit;

sub list {
  print sprintf('%-44s%s', 'ARGUMENT FILE', 'STATE'), "\n";

  my %merged = (%available, %enabled);
  for sort(keys (%merged)) -> $file {

    # Filter out dead symlinks
    next unless (%merged{$file}.IO ~~ :s);

    print sprintf('%-44s', $file);

    # enabled == file exists in argsdir and availdir
    print 'enabled'.colored['bright_green bold']
      if %enabled{$file} && %available{$file};

    # disabled == file does not exist in argsdir
    print 'disabled'.colored['bright_red bold'] unless %enabled{$file};

    # static == file only exists in argsdir
    print 'static' unless %available{$file};

    print "\n";
  }
}

sub list_enabled {
  for sort(keys %enabled) -> $file {
    print "$file\n" if %enabled{$file} && %available{$file};
  }
}

sub list_disabled {
  for sort(keys %available) -> $file {
    print "$file\n" unless %enabled{$file};
  }
}

sub enable {
  my $file = $_[0];

  # $file may be not the exact filename.
  unless (%available{$file}) {
    my $glob = <"$availdir/[0-9]*-$file.conf">;
    $file = IO::Path.new($glob).basename if $glob;
  }

  my $relpath = File::Spec.abs2rel(%available{$file}, $argsdir);
  symlink($relpath, "$argsdir/$file")
    or die "Cannot create symlink to $argsdir/$file\n";
}

sub disable {
  my $file = $_[0];

  # $file may be not the exact filename.
  unless (%enabled{$file}) {
    my $glob = <"$argsdir/[0-9][0-9]*-$file.conf">;
    $file = IO::Path.new($glob).basename if $glob;
  }

  # Unlink only if it is a symlink or --force is set.
  if (("$argsdir/$file".IO ~~ :l) || ($force)) {
    unlink("$argsdir/$file") or die("Cannot delete $file\n");
  }
  else {
    die("$file is not a symlink. Use --force to disable it anyways\n");
  }
}

sub edit {
  my $file = $_[0];
  shell($editor, "$availdir/$file");
}

sub help {
#   Pod::PlainText->new(sentence => 0)->parse_from_file($0);
  exit;
}

sub version {
  print "$PROGNAME $VERSION\n";
  exit;
}
